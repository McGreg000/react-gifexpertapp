{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","ev","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KA0B/C,OACG,sBAAMC,SAlBY,SAACC,GACnBA,EAAGC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAajB,SACG,uBACGO,KAAK,OACLC,MAAQT,EACRU,SA3BiB,SAACP,GAExBF,EAAcE,EAAGQ,OAAOF,a,+BCThBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACgCC,UAAWH,GAD3C,+DAEFI,MAAOF,GAFL,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACzB,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAcdM,GAdc,4CAAH,sDCERO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAItC,OACG,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAJ6B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAuBzC,OAhBAC,qBAAY,WACTxB,EAASC,GACLwB,MAAM,SAAAC,GACJC,YAAW,WAERJ,EAAS,CACNf,KAAMkB,EACNL,SAAS,IAEZO,QAAQC,IAAIH,KAEZ,UAET,CAAEzB,IAGEqB,EDnBwBQ,CAAc7B,GAAjCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAEpB,OACG,qCACG,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAAC,GAAG,OAEZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEhBlBmB,EAAe,WAAM,IAAD,EAEM5C,mBAAS,CAAC,kBAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAS9B,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEM8C,EAAWtB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEGA,SAAaA,GADLA,Y,MCf7BgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5eab2efb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n   //({ setCategories }) <==> Desestructuracion de props cogiendo solo setCategories\r\n   const [inputValue, setinputValue] = useState('');\r\n   \r\n   const handleInputChange = (ev) => {\r\n      //console.log(ev.target.value);\r\n      setinputValue(ev.target.value);\r\n   }\r\n   \r\n   const handleSubmit = (ev) => {\r\n      ev.preventDefault();\r\n      //console.log(ev.target.inputCat.value);\r\n      if ( inputValue.trim().length > 2 ) { // Validacion sobre tamaño de las cadenas\r\n         setCategories( cats => [inputValue, ...cats ] );\r\n         setinputValue(''); //Borramos el inputValue para que no se repita\r\n      }\r\n         /*  LO IDEAL SERÍA HACER UNA VALIDACION SOBRE CATS REPETIDAS */\r\n      \r\n   }\r\n\r\n/* Tarea :\r\n   1.- Modificar AddCategory para que reciba por props el setCategories \r\n      pasado desde GifExpertApp\r\n   2.- Modificar handleSubmit para que use setCategories para añadir la\r\n      nueva categoria. \r\n */\r\n   return (\r\n      <form onSubmit={ handleSubmit }>\r\n         <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n         />      \r\n      </ form>\r\n   )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired,\r\n}\r\n"," export const getGifs = async( category ) => {\r\n   const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=hxE2MkXakvKgb3mWeywBiWi8gg3ZBrCW`;\r\n   const resp = await fetch( url );\r\n   const { data } = await resp.json();\r\n\r\n   const gifs = data.map(img =>{\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images?.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   //console.log(data);\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n   //console.log(id, title, url);\r\n\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n         <img src={url} alt={title}/>\r\n         <p>{title}</p>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   const {data:images, loading} = useFetchGifs( category );\r\n   \r\n   return (\r\n      <>\r\n         <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n         { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map( img => \r\n                  (\r\n                  <GifGridItem \r\n                     key={ img.id }\r\n                     { ...img }                  \r\n                  />\r\n                  )\r\n               )\r\n            }         \r\n         </div>\r\n      </>\r\n   )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n   const [state, setState] = useState({\r\n      data: [], \r\n      loading: true\r\n   })\r\n\r\n   useEffect ( (  ) => {\r\n      getGifs( category )\r\n         .then( imgs => {\r\n            setTimeout(() => {\r\n               \r\n               setState({\r\n                  data: imgs, \r\n                  loading: false\r\n               });\r\n               console.log(imgs);\r\n               \r\n            }, 500);\r\n         });\r\n   }, [ category ]) \r\n   /*useEffects sin depencias lo que consigue es que el elemento solo se ejecute la primera vez que se renderiza el componente */\r\n\r\n   return state; \r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n   const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n   // const handleAdd = () => {\r\n   //    setCategories([...categories, 'Bleach']);\r\n   //    //setCategories( cats => [...cats, 'Bleach'] ); //Hace lo mismo usando el callback del setCategories\r\n   // };\r\n\r\n   return (\r\n      <>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={ setCategories } />\r\n         <hr />\r\n         <ol>\r\n            {\r\n               categories.map( category => (\r\n                  <GifGrid \r\n                     key = { category }\r\n                     category = { category }\r\n                  />\r\n               ) )\r\n            }\r\n         </ol>\r\n      </>\r\n   );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />, \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}